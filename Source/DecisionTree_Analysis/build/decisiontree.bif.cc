// This file was automatically generated by bifcl from /home/hendra/CCD/Source/DecisionTree_Analysis/src/decisiontree.bif (plugin mode).


#include "decisiontree.bif.h"


#line 54 "decisiontree.bif"
 #include "Plugin.h"
typedef plugin::Analysis_DecisionTree::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Analysis_DecisionTree::plugin;

#line 59 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Init(Frame* frame, val_list* BiF_ARGS)
	
#line 60 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("DecisionTree::Init() takes exactly 1 argument(s)");
		return 0;
		}
	bro_uint_t n = (bro_uint_t) ((*BiF_ARGS)[0]->AsCount());

#line 60 "decisiontree.bif"

		plugin_ref->Init(n);
		return new Val(1, TYPE_BOOL);
	} // end of BifFunc::DecisionTree::bro_Init

#line 63 "decisiontree.bif"

#line 65 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_LoadModel(Frame* frame, val_list* BiF_ARGS)
	
#line 66 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("DecisionTree::LoadModel() takes exactly 2 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	StringVal* model_name = (StringVal*) ((*BiF_ARGS)[1]->AsStringVal());

#line 66 "decisiontree.bif"

		plugin_ref->LoadModel(ID, model_name);
		return new Val(1, TYPE_BOOL);
	} // end of BifFunc::DecisionTree::bro_LoadModel

#line 69 "decisiontree.bif"

#line 71 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify(Frame* frame, val_list* BiF_ARGS)
    
#line 73 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("DecisionTree::Classify() takes exactly 3 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);

#line 73 "decisiontree.bif"

        return new Val(plugin_ref->Classify(ID, conn_ID, features, false), TYPE_INT);
    } // end of BifFunc::DecisionTree::bro_Classify

#line 75 "decisiontree.bif"

#line 77 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify_with_strings(Frame* frame, val_list* BiF_ARGS)
	
#line 79 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 4 )
		{
		reporter->Error("DecisionTree::Classify_with_strings() takes exactly 4 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);
	Val* features_str = (Val*) ((*BiF_ARGS)[3]);

#line 79 "decisiontree.bif"

		return new Val(plugin_ref->Classify_with_strings(ID, conn_ID, features, 
            features_str, false), TYPE_INT);
	} // end of BifFunc::DecisionTree::bro_Classify_with_strings

#line 82 "decisiontree.bif"

#line 84 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify_record(Frame* frame, val_list* BiF_ARGS)
	
#line 85 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("DecisionTree::Classify_record() takes exactly 3 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);

#line 85 "decisiontree.bif"

		return new Val(plugin_ref->Classify_record(ID, conn_ID, features, false), TYPE_INT);
	} // end of BifFunc::DecisionTree::bro_Classify_record

#line 87 "decisiontree.bif"

#line 89 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify_and_send(Frame* frame, val_list* BiF_ARGS)
	
#line 91 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("DecisionTree::Classify_and_send() takes exactly 3 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);

#line 91 "decisiontree.bif"

		plugin_ref->Classify(ID, conn_ID, features);
		return new Val(1, TYPE_BOOL);
	} // end of BifFunc::DecisionTree::bro_Classify_and_send

#line 94 "decisiontree.bif"

#line 96 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify_and_send_with_strings(Frame* frame, val_list* BiF_ARGS)
	
#line 98 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 4 )
		{
		reporter->Error("DecisionTree::Classify_and_send_with_strings() takes exactly 4 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);
	Val* features_str = (Val*) ((*BiF_ARGS)[3]);

#line 98 "decisiontree.bif"

		plugin_ref->Classify_with_strings(ID, conn_ID, features, features_str);
		return new Val(1, TYPE_BOOL);
	} // end of BifFunc::DecisionTree::bro_Classify_and_send_with_strings

#line 101 "decisiontree.bif"

#line 103 "decisiontree.bif"
Val* BifFunc::DecisionTree::bro_Classify_and_send_record(Frame* frame, val_list* BiF_ARGS)
	
#line 104 "decisiontree.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("DecisionTree::Classify_and_send_record() takes exactly 3 argument(s)");
		return 0;
		}
	Val* ID = (Val*) ((*BiF_ARGS)[0]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[1]);
	Val* features = (Val*) ((*BiF_ARGS)[2]);

#line 104 "decisiontree.bif"

		plugin_ref->Classify_record(ID, conn_ID, features);
		return new Val(1, TYPE_BOOL);
	} // end of BifFunc::DecisionTree::bro_Classify_and_send_record

#line 107 "decisiontree.bif"
namespace DecisionTree { EventHandlerPtr class_result_event;  }
void BifEvent::DecisionTree::generate_class_result_event(analyzer::Analyzer* analyzer, Val* ID, Val* conn_ID, bro_int_t c)
	{
	// Note that it is intentional that here we do not
	// check if ::DecisionTree::class_result_event is NULL, which should happen *before*
	// BifEvent::DecisionTree::generate_class_result_event is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(ID);
	vl->append(conn_ID);
	vl->append(new Val(c, TYPE_INT));

	mgr.QueueEvent(::DecisionTree::class_result_event, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
