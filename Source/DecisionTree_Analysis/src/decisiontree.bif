#################################################################################
# Copyright (c) 2017 by Hendra Gunadi (Hendra.Gunadi@murdoch.edu.au)            #
#                                                                               #
# Redistribution and use in source and binary forms, with or without            #
# modification, are permitted provided that the following conditions are met:   #
#                                                                               #
# (1) Redistributions of source code must retain the above copyright            #
#     notice, this list of conditions and the following disclaimer.             #
#                                                                               #
# (2) Redistributions in binary form must reproduce the above copyright         #
#     notice, this list of conditions and the following disclaimer in           #
#     the documentation and/or other materials provided with the                #
#     distribution.                                                             #
#                                                                               #
# (3) Neither the name of Hendra Gunadi and/or Murdoch University, nor          #
#     the names of contributors may be used to endorse or promote               #
#     products derived from this software without specific prior written        #
#     permission.                                                               #
#                                                                               #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   #
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     #
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    #
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     #
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF          #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS      #
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       #
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    #
# POSSIBILITY OF SUCH DAMAGE.                                                   #
#                                                                               #
# decisiontree.bif : interface between the decision tree plugin and Bro scripts #
# Contents :                                                                    #
#   * Init : initialize the plugin with the number of models                    #
#   * LoadModel : load the model from the file specified by the input string    #
#   * Classify : classify input vector according to the model specified. The    #
#           order of the values in the feature vector must match the order of   #
#           features in the model                                               #
#   * Classify_with_strings :                                                   #
#           same as classify with additional input of string                    #
#           vector indicating the name of the feature. The feature vector does  #
#           not have to be in order as the plugin will match the feature names  #
#           specified in the model and the string vector.                       #
#   * Classify_record :                                                         # 
#           similar to classify except that the input is a record.              #
#           Note that the feature names specified in the model must exists in   #
#           the input record otherwise the execution will terminate             #
#   * class_result_event :                                                      #
#           event raised by the plugin specifying the class of the input vector.#
#                                                                               #
# *) For each of the classify functions there is a variant which will send the  #
# classification result as an event. This is for experimental purpose as we do  #
# not really want to flood Bro with too many redundant events                   #
#################################################################################

module DecisionTree;

%%{ #include "Plugin.h"
typedef plugin::Analysis_DecisionTree::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Analysis_DecisionTree::plugin;
%%}

function LoadModel%(ID : FeatureAnalysis::set_ID, model_name : string%): bool
	%{ plugin_ref->LoadModel(ID, model_name); return new Val(1, TYPE_BOOL);	%}

function Classify%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, 
        features: FeatureAnalysis::feature_vector%): int
    %{ return new Val(plugin_ref->Classify(ID, conn_ID, features, false), TYPE_INT); %}

function Classify_with_strings%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, 
        features: FeatureAnalysis::feature_vector, features_str: string_vec%): int
	%{ return new Val(plugin_ref->Classify_with_strings(ID, conn_ID, features, features_str, false), TYPE_INT);	%}

function Classify_record%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, features: any%): int
	%{ return new Val(plugin_ref->Classify_record(ID, conn_ID, features, false), TYPE_INT); %}

function Classify_and_send%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, features: 
        FeatureAnalysis::feature_vector%): bool
	%{ if (plugin_ref->Classify(ID, conn_ID, features) == -1) return new Val(0, TYPE_BOOL);	
        return new Val(1, TYPE_BOOL); %}

function Classify_and_send_with_strings%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, 
        features: FeatureAnalysis::feature_vector, features_str: string_vec%): bool
	%{ if (plugin_ref->Classify_with_strings(ID, conn_ID, features, features_str) == -1) return new Val(0, TYPE_BOOL); 
        return new Val(1, TYPE_BOOL); %}

function Classify_and_send_record%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, features: any%): bool
	%{ plugin_ref->Classify_record(ID, conn_ID, features); return new Val(1, TYPE_BOOL); %}

event class_result_event%(ID : FeatureAnalysis::set_ID, conn_ID : conn_id, c:int%);
