// This file was automatically generated by bifcl from /home/hendra/CCD/Source/Analysis/src/analysis.bif (plugin mode).


#include "analysis.bif.h"

namespace BifType { namespace Enum{ namespace FeatureAnalysis {  EnumType * Analysis_ID;  } } }

#line 59 "analysis.bif"
 
#include "Plugin.h"
#include <cfloat>
typedef plugin::Analysis_FeatureAnalysis::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Analysis_FeatureAnalysis::plugin;

#line 66 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_ConfigureInternalType(Frame* frame, val_list* BiF_ARGS)
    
#line 67 "analysis.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("FeatureAnalysis::ConfigureInternalType() takes exactly 0 argument(s)");
		return 0;
		}

#line 67 "analysis.bif"

        plugin_ref->ConfigureInternalType();
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_ConfigureInternalType

#line 70 "analysis.bif"

#line 72 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_Extract(Frame* frame, val_list* BiF_ARGS)
    
#line 73 "analysis.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("FeatureAnalysis::Extract() takes exactly 3 argument(s)");
		return 0;
		}
	Val* v = (Val*) ((*BiF_ARGS)[0]);
	Val* aid = (Val*) ((*BiF_ARGS)[1]);
	Val* tag = (Val*) ((*BiF_ARGS)[2]);

#line 73 "analysis.bif"

        return plugin_ref->Extract(v, aid, tag);
    } // end of BifFunc::FeatureAnalysis::bro_Extract

#line 75 "analysis.bif"

#line 77 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_Extract_vector(Frame* frame, val_list* BiF_ARGS)
    
#line 78 "analysis.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("FeatureAnalysis::Extract_vector() takes exactly 1 argument(s)");
		return 0;
		}
	Val* v = (Val*) ((*BiF_ARGS)[0]);

#line 78 "analysis.bif"

        return plugin_ref->ExtractVector(v);
    } // end of BifFunc::FeatureAnalysis::bro_Extract_vector

#line 80 "analysis.bif"

#line 83 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_SetStepSize(Frame* frame, val_list* BiF_ARGS)
    
#line 84 "analysis.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("FeatureAnalysis::SetStepSize() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	bro_uint_t step_size = (bro_uint_t) ((*BiF_ARGS)[1]->AsCount());

#line 84 "analysis.bif"

        plugin_ref->SetStepSize(id, step_size);
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_SetStepSize

#line 87 "analysis.bif"

#line 89 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_RemoveConn(Frame* frame, val_list* BiF_ARGS)
    
#line 90 "analysis.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("FeatureAnalysis::RemoveConn() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* UID = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 90 "analysis.bif"

        plugin_ref->RemoveConnection(UID);
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_RemoveConn

#line 93 "analysis.bif"

#line 95 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_RegisterAnalysis(Frame* frame, val_list* BiF_ARGS)
    
#line 96 "analysis.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("FeatureAnalysis::RegisterAnalysis() takes exactly 3 argument(s)");
		return 0;
		}
	StringVal* UID = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());
	Val* id = (Val*) ((*BiF_ARGS)[1]);
	Val* conn_ID = (Val*) ((*BiF_ARGS)[2]);

#line 96 "analysis.bif"

        plugin_ref->RegisterAnalysis(UID, id, conn_ID);
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_RegisterAnalysis

#line 99 "analysis.bif"

#line 101 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_AddFeature(Frame* frame, val_list* BiF_ARGS)
    
#line 103 "analysis.bif"
{
	if ( BiF_ARGS->length() != 4 )
		{
		reporter->Error("FeatureAnalysis::AddFeature() takes exactly 4 argument(s)");
		return 0;
		}
	StringVal* UID = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());
	double feature = (double) ((*BiF_ARGS)[1]->AsDouble());
	Val* aid = (Val*) ((*BiF_ARGS)[2]);
	Val* tag = (Val*) ((*BiF_ARGS)[3]);

#line 103 "analysis.bif"

        plugin_ref->AddFeature(UID, feature, aid, tag);
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_AddFeature

#line 106 "analysis.bif"

#line 108 "analysis.bif"
Val* BifFunc::FeatureAnalysis::bro_CalculateMetric(Frame* frame, val_list* BiF_ARGS)
    
#line 109 "analysis.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("FeatureAnalysis::CalculateMetric() takes exactly 0 argument(s)");
		return 0;
		}

#line 109 "analysis.bif"

        plugin_ref->CalculateMetric();
        return new Val(1, TYPE_BOOL);
    } // end of BifFunc::FeatureAnalysis::bro_CalculateMetric

#line 112 "analysis.bif"
namespace FeatureAnalysis { EventHandlerPtr metric_event;  }
void BifEvent::FeatureAnalysis::generate_metric_event(analyzer::Analyzer* analyzer, Val* id, Val* v, Val* conn_ID)
	{
	// Note that it is intentional that here we do not
	// check if ::FeatureAnalysis::metric_event is NULL, which should happen *before*
	// BifEvent::FeatureAnalysis::generate_metric_event is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(id);
	vl->append(v);
	vl->append(conn_ID);

	mgr.QueueEvent(::FeatureAnalysis::metric_event, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
