#################################################################################
# Copyright (c) 2017 by Hendra Gunadi (Hendra.Gunadi@murdoch.edu.au)            #
#                                                                               #
# Redistribution and use in source and binary forms, with or without            #
# modification, are permitted provided that the following conditions are met:   #
#                                                                               #
# (1) Redistributions of source code must retain the above copyright            #
#     notice, this list of conditions and the following disclaimer.             #
#                                                                               #
# (2) Redistributions in binary form must reproduce the above copyright         #
#     notice, this list of conditions and the following disclaimer in           #
#     the documentation and/or other materials provided with the                #
#     distribution.                                                             #
#                                                                               #
# (3) Neither the name of Hendra Gunadi and/or Murdoch University, nor          #
#     the names of contributors may be used to endorse or promote               #
#     products derived from this software without specific prior written        #
#     permission.                                                               #
#                                                                               #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   #
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     #
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    #
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     #
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF          #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS      #
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       #
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    #
# POSSIBILITY OF SUCH DAMAGE.                                                   #
#                                                                               #
# analysis.bif : interface between Bro script and the analysis plugin.          #
# Content:                                                                      #
#   * Analysis_ID       : enum of analysis ID used in the plugin as well        #
#   * Extract           : extract a value from vector of metric result (record) #
#   * Extract_vector    : extract vector of double values from the vector of    #
#                         metric result (record)                                #
#   * SetStepSize       : set the number of data to trigger metric calculation  #
#   * RemoveConn        : remove a connection from the dictionary               #
#   * RegisterAnalysis  : indicate the beginning of a transaction to add feature#
#   * AddFeature        : add the feature associated with the analyzers         #
#   * CalculateMetric   : indicate the end of a transaction to add feature      #
#   * metric_event      : an event definition which contains the result of      #
#                         metric calculation                                    #
#################################################################################

module FeatureAnalysis;

enum Analysis_ID %{
    KS_ANALYSIS = 0,
    ENTROPY_ANALYSIS = 1,
    CCE_ANALYSIS = 2,
    NULL_ANALYSIS = 3,
    MULTIMODAL_ANALYSIS = 4,
    AUTOCORRELATION_ANALYSIS = 5,
    REGULARITY_ANALYSIS = 6,
%}

enum Direction %{
    FORWARD = 0,
    BACKWARD = 1,
%}

%%{ 
#include "Plugin.h"
#include <cfloat>
typedef plugin::Analysis_FeatureAnalysis::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Analysis_FeatureAnalysis::plugin;
%%}

function ConfigureInternalType%(%): bool
    %{
        plugin_ref->ConfigureInternalType();
        return new Val(1, TYPE_BOOL);
    %}

function Extract%(v : result_vector, aid : Analysis_ID, tag : analysis_tag%): double
    %{
        return plugin_ref->Extract(v, aid, tag);
    %}

function Extract_vector%(v : result_vector%): FeatureAnalysis::feature_vector
    %{
        return plugin_ref->ExtractVector(v);
    %}

function GetDirection%(conn_source : addr, pkt_source : addr%): FeatureAnalysis::Direction
    %{
        return plugin_ref->GetDirection(conn_source, pkt_source);
    %}


function SetStepSize%(id : set_ID, step_size : count%): bool
    %{
        plugin_ref->SetStepSize(id, step_size);
        return new Val(1, TYPE_BOOL);
    %}

function SetKSWindowSize%(id : set_ID, window_size : count%): bool
    %{
        plugin_ref->Set_KS_Window_Size(id, window_size);
        return new Val(1, TYPE_BOOL);
    %}

function SetRegularityParameters%(id : set_ID, window_number : count, window_size : count%): bool
    %{
        plugin_ref->Set_Regularity_Parameters(id, window_number, window_size);
        return new Val(1, TYPE_BOOL);
    %}

function SetCCEPatternSize%(id : set_ID, pattern_size : count%): bool
    %{
        plugin_ref->Set_CCE_Pattern_Size(id, pattern_size);
        return new Val(1, TYPE_BOOL);
    %}

function SetAutocorrelationLags%(id : set_ID, lag_max : count%): bool
    %{
        plugin_ref->Set_Autocorrelation_Lags(id, lag_max);
        return new Val(1, TYPE_BOOL);
    %}

function LoadNormalData%(tag : analysis_tag, KS_data_file : string%): bool
    %{
        plugin_ref->Load_Normal_Data(tag, KS_data_file);
        return new Val(1, TYPE_BOOL);
    %}

function LoadInterval%(tag : analysis_tag, aid : any, Interval_data_file : string%): bool
    %{
        plugin_ref->Load_Interval(tag, aid, Interval_data_file);
        return new Val(1, TYPE_BOOL);
    %}

function SetBinNull%(tag : analysis_tag, aid : any, bin_count : count%): bool
    %{
        plugin_ref->Set_Bin_Null(tag, aid, bin_count);
        return new Val(1, TYPE_BOOL);
    %}

function RemoveConn%(UID : string%): bool
    %{
        plugin_ref->RemoveConnection(UID);
        return new Val(1, TYPE_BOOL);
    %}

function RegisterAnalysis%(UID : string, id : set_ID, conn_ID : conn_id, direction : Direction %): bool
    %{
        plugin_ref->RegisterAnalysis(UID, id, conn_ID, direction);
        return new Val(1, TYPE_BOOL);
    %}

function AddFeature%(feature: double, aid : any, tag : analysis_tag%): bool
    %{
        plugin_ref->AddFeature(feature, aid, tag);
        return new Val(1, TYPE_BOOL);
    %}

function CalculateMetric %(%): bool
    %{
        plugin_ref->CalculateMetric();
        return new Val(1, TYPE_BOOL);
    %}

event metric_event%(id : set_ID, direction : Direction, v : result_vector, conn_ID: conn_id%);
