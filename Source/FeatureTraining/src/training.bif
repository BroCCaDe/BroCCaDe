#################################################################################
# Copyright (c) 2017 Murdoch University                                         #
#                                                                               # 
# Written by Hendra Gunadi (Hendra.Gunadi@murdoch.edu.au)                       #
#                                                                               #
# Redistribution and use in source and binary forms, with or without            #
# modification, are permitted provided that the following conditions are met:   #
#                                                                               #
# (1) Redistributions of source code must retain the above copyright            #
#     notice, this list of conditions and the following disclaimer.             #
#                                                                               #
# (2) Redistributions in binary form must reproduce the above copyright         #
#     notice, this list of conditions and the following disclaimer in           #
#     the documentation and/or other materials provided with the                #
#     distribution.                                                             #
#                                                                               #
# (3) Neither the name of Hendra Gunadi and/or Murdoch University, nor          #
#     the names of contributors may be used to endorse or promote               #
#     products derived from this software without specific prior written        #
#     permission.                                                               #
#                                                                               #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   #
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     #
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    #
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     #
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF          #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS      #
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       #
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    #
# POSSIBILITY OF SUCH DAMAGE.                                                   #
#                                                                               #
# training.bif : interface between the plugin and Bro scripts                   #
# Contents :                                                                    #
#   * ChangeRelation        : change the relation string                        #
#   * AddAttributes         : add an attribute with a particular name. This will#
#                             corresponds to the feature name for Weka.         #
#   * AddClass              : add an attribute with the class names. This will  #
#                             corresponds to the class names in the classifier. #
#   * AddDataRow            : add comma delimited data and its class            #
#   * print_training_data   : print the training data into a file               #
#################################################################################

module FeatureTraining;

%%{ #include "Plugin.h"
typedef plugin::Feature_Training::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Feature_Training::plugin;
%%}

function ChangeRelation%(ID : FeatureAnalysis::set_ID, name : string%): bool
	%{ plugin_ref->ChangeRelation(ID, name); return new Val(1, TYPE_BOOL); %}

function AddAttributes%(ID : FeatureAnalysis::set_ID, name : string%): bool
	%{ plugin_ref->Add_Attributes(ID, name); return new Val(1, TYPE_BOOL); %}

function AddClass%(ID : FeatureAnalysis::set_ID, name : string%): bool
	%{ plugin_ref->Add_Class(ID, name); return new Val(1, TYPE_BOOL); %}

function AddDataRow%(ID : FeatureAnalysis::set_ID, values : FeatureAnalysis::feature_vector, name : string%): bool
	%{ plugin_ref->Add_DataRow(ID, values, name); return new Val(1, TYPE_BOOL); %}

function print_training_data%(ID : FeatureAnalysis::set_ID, file_name : string%): bool
	%{ plugin_ref->print(ID, file_name); return new Val(1, TYPE_BOOL); %}
