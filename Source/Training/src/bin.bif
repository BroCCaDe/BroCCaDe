#################################################################################
# Copyright (c) 2017 by Hendra Gunadi (Hendra.Gunadi@murdoch.edu.au)            #
#                                                                               #
# Redistribution and use in source and binary forms, with or without            #
# modification, are permitted provided that the following conditions are met:   #
#                                                                               #
# (1) Redistributions of source code must retain the above copyright            #
#     notice, this list of conditions and the following disclaimer.             #
#                                                                               #
# (2) Redistributions in binary form must reproduce the above copyright         #
#     notice, this list of conditions and the following disclaimer in           #
#     the documentation and/or other materials provided with the                #
#     distribution.                                                             #
#                                                                               #
# (3) Neither the name of Hendra Gunadi and/or Murdoch University, nor          #
#     the names of contributors may be used to endorse or promote               #
#     products derived from this software without specific prior written        #
#     permission.                                                               #
#                                                                               #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   #
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE     #
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    #
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     #
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           #
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF          #
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS      #
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN       #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       #
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    #
# POSSIBILITY OF SUCH DAMAGE.                                                   #
#                                                                               #
# bin.bif : interface between the plugin and Bro script.                        #
# Content :                                                                     #
#   * RemoveConnection                                                          #
#       Remove the connection from the dictionary and print the outputs if      #
#       the conditions are fulfilled                                            #
#   * add_feature                                                               #
#       Add the data point both to individual flows and aggregate flow (ALL)    #
#   * SetBinCount                                                               #
#       Set the bin numbers                                                     #
#   * SetKSDataCount                                                            #
#       Set the data number for the normal data sizes and how many normal data  #
#   * ChangePrefix                                                              #
#       Change the prefix to the output file                                    #
#################################################################################

module BinTraining;

%%{ #include "Plugin.h"
typedef plugin::Training_Bin::Plugin plugin_t;
static plugin_t *plugin_ref = &plugin::Training_Bin::plugin;
%%}

function SetBinCount%(bin_count : any%): bool
    %{ plugin_ref->SetBinCount(bin_count); return new Val(1, TYPE_BOOL); %}

function ChangeThreshold%(min_KS : int, min_bin : int%): bool
    %{ plugin_ref->ChangeThreshold(min_KS, min_bin); return new Val(1, TYPE_BOOL); %}

function ChangePrefix%(prefix : string%): bool
    %{ plugin_ref->ChangePrefix(prefix); return new Val(1, TYPE_BOOL); %}

function SetKSDataCount%(ks_data_count : any, ks_max_counter : int%): bool
    %{ plugin_ref->SetKSDataCount(ks_data_count, ks_max_counter); return new Val(1, TYPE_BOOL); %}

function RemoveConn%(UID : string, direction : FeatureAnalysis::Direction, tag: analysis_tag%): bool
	%{ plugin_ref->RemoveConnection(UID, direction, tag); return new Val(1, TYPE_BOOL);	%}

function add_feature%(UID : string, direction : FeatureAnalysis::Direction, feature: double, tag: analysis_tag%): bool
	%{ plugin_ref->add_feature(UID, direction, feature, tag); return new Val(1, TYPE_BOOL);	%}
